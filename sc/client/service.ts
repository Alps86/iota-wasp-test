// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmlib from "./wasmlib"
import * as events from "./events"

export interface GetCounterResult {
	counter: wasmlib.Int64;
}

export class ScService extends wasmlib.Service {

  constructor(client: BasicClient, chainId: string) {
    super(client, chainId, 0x210c291a);
  }

	public async callIncrement(): Promise<void> {
		const args: wasmlib.Argument[] = [
		];
    	await this.postRequest(0xeb5dcacd, args);
	}

	public async callIncrementRecurse5x(): Promise<void> {
		const args: wasmlib.Argument[] = [
		];
    	await this.postRequest(0x8749fbff, args);
	}

	public async endlessLoop(): Promise<void> {
		const args: wasmlib.Argument[] = [
		];
    	await this.postRequest(0x365f0929, args);
	}

	public async increment(): Promise<void> {
		const args: wasmlib.Argument[] = [
		];
    	await this.postRequest(0xd351bd12, args);
	}

	public async incrementWithDelay(delay: wasmlib.Int32): Promise<void> {
		const args: wasmlib.Argument[] = [
				{ key: 'delay', value: delay, },
		];
    	await this.postRequest(0xa235bba7, args);
	}

	public async init(counter: wasmlib.Int64, owner: wasmlib.AgentID): Promise<void> {
		const args: wasmlib.Argument[] = [
				{ key: 'counter', value: counter, },
				{ key: 'owner', value: owner, },
		];
    	await this.postRequest(0x1f44d644, args);
	}

	public async localStateInternalCall(): Promise<void> {
		const args: wasmlib.Argument[] = [
		];
    	await this.postRequest(0xecfc5d33, args);
	}

	public async localStatePost(): Promise<void> {
		const args: wasmlib.Argument[] = [
		];
    	await this.postRequest(0x3fd54d13, args);
	}

	public async localStateSandboxCall(): Promise<void> {
		const args: wasmlib.Argument[] = [
		];
    	await this.postRequest(0x7bd22c53, args);
	}

	public async postIncrement(): Promise<void> {
		const args: wasmlib.Argument[] = [
		];
    	await this.postRequest(0x81c772f5, args);
	}

	public async repeatMany(numRepeats: wasmlib.Int64): Promise<void> {
		const args: wasmlib.Argument[] = [
				{ key: 'numRepeats', value: numRepeats, },
		];
    	await this.postRequest(0x4ff450d3, args);
	}

	public async testLeb128(): Promise<void> {
		const args: wasmlib.Argument[] = [
		];
    	await this.postRequest(0xd8364cb9, args);
	}

	public async whenMustIncrement(dummy: wasmlib.Int64): Promise<void> {
		const args: wasmlib.Argument[] = [
				{ key: 'dummy', value: dummy, },
		];
    	await this.postRequest(0xb4c3e7a6, args);
	}

	public async getCounter(): Promise<GetCounterResult> {
		const args: wasmlib.Argument[] = [
		];
		const response = await this.callView(0xb423e607, args);
        let result: GetCounterResult = {};

		let counter = response['counter'];
		result.counter = BigInt(0);
		if (counter) {
			result.counter = counter.readBigInt64LE(counter);
		}

		return result;
	}
}
